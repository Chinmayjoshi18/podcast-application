// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  podcasts       Podcast[]
  followers      Follow[]         @relation("following")
  following      Follow[]         @relation("follower")
  comments       Comment[]
  likes          Like[]
  notifications  Notification[]   @relation("userNotifications")
  sentNotifications Notification[] @relation("senderNotifications")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Podcast {
  id          String   @id @default(cuid())
  title       String
  description String?
  audioUrl    String
  coverImage  String?
  duration    Int?     // Duration in seconds
  isPublic    Boolean  @default(true) // Privacy setting
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  tags      Tag[]     @relation("PodcastTags")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  podcastId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  podcast Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  podcastId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  podcast Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)

  @@unique([userId, podcastId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  
  podcasts  Podcast[] @relation("PodcastTags")
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // e.g., "new_podcast", "new_follower", "like", "comment"
  content     String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  userId      String   // User who receives the notification
  senderId    String?  // User who triggered the notification
  
  user        User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  sender      User?    @relation("senderNotifications", fields: [senderId], references: [id], onDelete: SetNull)
}